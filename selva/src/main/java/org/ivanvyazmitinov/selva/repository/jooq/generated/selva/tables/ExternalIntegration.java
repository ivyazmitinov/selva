/*
 * This file is generated by jOOQ.
 */
package org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.Keys;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.Selva;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.ExternalProfile.ExternalProfilePath;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.records.ExternalIntegrationRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExternalIntegration extends TableImpl<ExternalIntegrationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>selva.external_integration</code>
     */
    public static final ExternalIntegration EXTERNAL_INTEGRATION = new ExternalIntegration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExternalIntegrationRecord> getRecordType() {
        return ExternalIntegrationRecord.class;
    }

    /**
     * The column <code>selva.external_integration.id</code>.
     */
    public final TableField<ExternalIntegrationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>selva.external_integration.name</code>.
     */
    public final TableField<ExternalIntegrationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>selva.external_integration.token</code>.
     */
    public final TableField<ExternalIntegrationRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>selva.external_integration.logo</code>.
     */
    public final TableField<ExternalIntegrationRecord, byte[]> LOGO = createField(DSL.name("logo"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>selva.external_integration.profile_template</code>.
     */
    public final TableField<ExternalIntegrationRecord, JSONB> PROFILE_TEMPLATE = createField(DSL.name("profile_template"), SQLDataType.JSONB, this, "");

    private ExternalIntegration(Name alias, Table<ExternalIntegrationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ExternalIntegration(Name alias, Table<ExternalIntegrationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>selva.external_integration</code> table reference
     */
    public ExternalIntegration(String alias) {
        this(DSL.name(alias), EXTERNAL_INTEGRATION);
    }

    /**
     * Create an aliased <code>selva.external_integration</code> table reference
     */
    public ExternalIntegration(Name alias) {
        this(alias, EXTERNAL_INTEGRATION);
    }

    /**
     * Create a <code>selva.external_integration</code> table reference
     */
    public ExternalIntegration() {
        this(DSL.name("external_integration"), null);
    }

    public <O extends Record> ExternalIntegration(Table<O> path, ForeignKey<O, ExternalIntegrationRecord> childPath, InverseForeignKey<O, ExternalIntegrationRecord> parentPath) {
        super(path, childPath, parentPath, EXTERNAL_INTEGRATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ExternalIntegrationPath extends ExternalIntegration implements Path<ExternalIntegrationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ExternalIntegrationPath(Table<O> path, ForeignKey<O, ExternalIntegrationRecord> childPath, InverseForeignKey<O, ExternalIntegrationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ExternalIntegrationPath(Name alias, Table<ExternalIntegrationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ExternalIntegrationPath as(String alias) {
            return new ExternalIntegrationPath(DSL.name(alias), this);
        }

        @Override
        public ExternalIntegrationPath as(Name alias) {
            return new ExternalIntegrationPath(alias, this);
        }

        @Override
        public ExternalIntegrationPath as(Table<?> alias) {
            return new ExternalIntegrationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Selva.SELVA;
    }

    @Override
    public Identity<ExternalIntegrationRecord, Long> getIdentity() {
        return (Identity<ExternalIntegrationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExternalIntegrationRecord> getPrimaryKey() {
        return Keys.EXTERNAL_INTEGRATION_PKEY;
    }

    @Override
    public List<UniqueKey<ExternalIntegrationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.EXTERNAL_INTEGRATION_NAME_KEY, Keys.EXTERNAL_INTEGRATION_TOKEN_KEY);
    }

    private transient ExternalProfilePath _externalProfile;

    /**
     * Get the implicit to-many join path to the
     * <code>selva.external_profile</code> table
     */
    public ExternalProfilePath externalProfile() {
        if (_externalProfile == null)
            _externalProfile = new ExternalProfilePath(this, null, Keys.EXTERNAL_PROFILE__EXTERNAL_PROFILE_EXTERNAL_INTEGRATION_ID_FKEY.getInverseKey());

        return _externalProfile;
    }

    @Override
    public ExternalIntegration as(String alias) {
        return new ExternalIntegration(DSL.name(alias), this);
    }

    @Override
    public ExternalIntegration as(Name alias) {
        return new ExternalIntegration(alias, this);
    }

    @Override
    public ExternalIntegration as(Table<?> alias) {
        return new ExternalIntegration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalIntegration rename(String name) {
        return new ExternalIntegration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalIntegration rename(Name name) {
        return new ExternalIntegration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalIntegration rename(Table<?> name) {
        return new ExternalIntegration(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalIntegration where(Condition condition) {
        return new ExternalIntegration(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalIntegration where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalIntegration where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalIntegration where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExternalIntegration where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExternalIntegration where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExternalIntegration where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExternalIntegration where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalIntegration whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalIntegration whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
