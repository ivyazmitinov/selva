/*
 * This file is generated by jOOQ.
 */
package org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.Keys;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.Selva;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.BaseProfile.BaseProfilePath;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.ExternalIntegration.ExternalIntegrationPath;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.records.ExternalProfileRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExternalProfile extends TableImpl<ExternalProfileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>selva.external_profile</code>
     */
    public static final ExternalProfile EXTERNAL_PROFILE = new ExternalProfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExternalProfileRecord> getRecordType() {
        return ExternalProfileRecord.class;
    }

    /**
     * The column <code>selva.external_profile.id</code>.
     */
    public final TableField<ExternalProfileRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>selva.external_profile.base_profile_id</code>.
     */
    public final TableField<ExternalProfileRecord, Long> BASE_PROFILE_ID = createField(DSL.name("base_profile_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>selva.external_profile.external_integration_id</code>.
     */
    public final TableField<ExternalProfileRecord, Long> EXTERNAL_INTEGRATION_ID = createField(DSL.name("external_integration_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>selva.external_profile.is_public</code>.
     */
    public final TableField<ExternalProfileRecord, Boolean> IS_PUBLIC = createField(DSL.name("is_public"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>selva.external_profile.fields</code>.
     */
    public final TableField<ExternalProfileRecord, JSONB> FIELDS = createField(DSL.name("fields"), SQLDataType.JSONB.nullable(false), this, "");

    private ExternalProfile(Name alias, Table<ExternalProfileRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ExternalProfile(Name alias, Table<ExternalProfileRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>selva.external_profile</code> table reference
     */
    public ExternalProfile(String alias) {
        this(DSL.name(alias), EXTERNAL_PROFILE);
    }

    /**
     * Create an aliased <code>selva.external_profile</code> table reference
     */
    public ExternalProfile(Name alias) {
        this(alias, EXTERNAL_PROFILE);
    }

    /**
     * Create a <code>selva.external_profile</code> table reference
     */
    public ExternalProfile() {
        this(DSL.name("external_profile"), null);
    }

    public <O extends Record> ExternalProfile(Table<O> path, ForeignKey<O, ExternalProfileRecord> childPath, InverseForeignKey<O, ExternalProfileRecord> parentPath) {
        super(path, childPath, parentPath, EXTERNAL_PROFILE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ExternalProfilePath extends ExternalProfile implements Path<ExternalProfileRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ExternalProfilePath(Table<O> path, ForeignKey<O, ExternalProfileRecord> childPath, InverseForeignKey<O, ExternalProfileRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ExternalProfilePath(Name alias, Table<ExternalProfileRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ExternalProfilePath as(String alias) {
            return new ExternalProfilePath(DSL.name(alias), this);
        }

        @Override
        public ExternalProfilePath as(Name alias) {
            return new ExternalProfilePath(alias, this);
        }

        @Override
        public ExternalProfilePath as(Table<?> alias) {
            return new ExternalProfilePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Selva.SELVA;
    }

    @Override
    public Identity<ExternalProfileRecord, Long> getIdentity() {
        return (Identity<ExternalProfileRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExternalProfileRecord> getPrimaryKey() {
        return Keys.EXTERNAL_PROFILE_PKEY;
    }

    @Override
    public List<ForeignKey<ExternalProfileRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXTERNAL_PROFILE__EXTERNAL_PROFILE_BASE_PROFILE_ID_FKEY, Keys.EXTERNAL_PROFILE__EXTERNAL_PROFILE_EXTERNAL_INTEGRATION_ID_FKEY);
    }

    private transient BaseProfilePath _baseProfile;

    /**
     * Get the implicit join path to the <code>selva.base_profile</code> table.
     */
    public BaseProfilePath baseProfile() {
        if (_baseProfile == null)
            _baseProfile = new BaseProfilePath(this, Keys.EXTERNAL_PROFILE__EXTERNAL_PROFILE_BASE_PROFILE_ID_FKEY, null);

        return _baseProfile;
    }

    private transient ExternalIntegrationPath _externalIntegration;

    /**
     * Get the implicit join path to the <code>selva.external_integration</code>
     * table.
     */
    public ExternalIntegrationPath externalIntegration() {
        if (_externalIntegration == null)
            _externalIntegration = new ExternalIntegrationPath(this, Keys.EXTERNAL_PROFILE__EXTERNAL_PROFILE_EXTERNAL_INTEGRATION_ID_FKEY, null);

        return _externalIntegration;
    }

    @Override
    public ExternalProfile as(String alias) {
        return new ExternalProfile(DSL.name(alias), this);
    }

    @Override
    public ExternalProfile as(Name alias) {
        return new ExternalProfile(alias, this);
    }

    @Override
    public ExternalProfile as(Table<?> alias) {
        return new ExternalProfile(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalProfile rename(String name) {
        return new ExternalProfile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalProfile rename(Name name) {
        return new ExternalProfile(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalProfile rename(Table<?> name) {
        return new ExternalProfile(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalProfile where(Condition condition) {
        return new ExternalProfile(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalProfile where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalProfile where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalProfile where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExternalProfile where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExternalProfile where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExternalProfile where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExternalProfile where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalProfile whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExternalProfile whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
