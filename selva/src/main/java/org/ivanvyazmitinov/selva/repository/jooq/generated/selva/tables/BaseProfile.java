/*
 * This file is generated by jOOQ.
 */
package org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.Keys;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.Selva;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.ExternalProfile.ExternalProfilePath;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.User.UserPath;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.records.BaseProfileRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BaseProfile extends TableImpl<BaseProfileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>selva.base_profile</code>
     */
    public static final BaseProfile BASE_PROFILE = new BaseProfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BaseProfileRecord> getRecordType() {
        return BaseProfileRecord.class;
    }

    /**
     * The column <code>selva.base_profile.id</code>.
     */
    public final TableField<BaseProfileRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>selva.base_profile.user_id</code>.
     */
    public final TableField<BaseProfileRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>selva.base_profile.fields</code>.
     */
    public final TableField<BaseProfileRecord, JSONB> FIELDS = createField(DSL.name("fields"), SQLDataType.JSONB.nullable(false), this, "");

    private BaseProfile(Name alias, Table<BaseProfileRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BaseProfile(Name alias, Table<BaseProfileRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>selva.base_profile</code> table reference
     */
    public BaseProfile(String alias) {
        this(DSL.name(alias), BASE_PROFILE);
    }

    /**
     * Create an aliased <code>selva.base_profile</code> table reference
     */
    public BaseProfile(Name alias) {
        this(alias, BASE_PROFILE);
    }

    /**
     * Create a <code>selva.base_profile</code> table reference
     */
    public BaseProfile() {
        this(DSL.name("base_profile"), null);
    }

    public <O extends Record> BaseProfile(Table<O> path, ForeignKey<O, BaseProfileRecord> childPath, InverseForeignKey<O, BaseProfileRecord> parentPath) {
        super(path, childPath, parentPath, BASE_PROFILE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BaseProfilePath extends BaseProfile implements Path<BaseProfileRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BaseProfilePath(Table<O> path, ForeignKey<O, BaseProfileRecord> childPath, InverseForeignKey<O, BaseProfileRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BaseProfilePath(Name alias, Table<BaseProfileRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BaseProfilePath as(String alias) {
            return new BaseProfilePath(DSL.name(alias), this);
        }

        @Override
        public BaseProfilePath as(Name alias) {
            return new BaseProfilePath(alias, this);
        }

        @Override
        public BaseProfilePath as(Table<?> alias) {
            return new BaseProfilePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Selva.SELVA;
    }

    @Override
    public Identity<BaseProfileRecord, Long> getIdentity() {
        return (Identity<BaseProfileRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BaseProfileRecord> getPrimaryKey() {
        return Keys.BASE_PROFILE_PKEY;
    }

    @Override
    public List<UniqueKey<BaseProfileRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.BASE_PROFILE_USER_ID_KEY);
    }

    @Override
    public List<ForeignKey<BaseProfileRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BASE_PROFILE__BASE_PROFILE_USER_ID_FKEY);
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>selva.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.BASE_PROFILE__BASE_PROFILE_USER_ID_FKEY, null);

        return _user;
    }

    private transient ExternalProfilePath _externalProfile;

    /**
     * Get the implicit to-many join path to the
     * <code>selva.external_profile</code> table
     */
    public ExternalProfilePath externalProfile() {
        if (_externalProfile == null)
            _externalProfile = new ExternalProfilePath(this, null, Keys.EXTERNAL_PROFILE__EXTERNAL_PROFILE_BASE_PROFILE_ID_FKEY.getInverseKey());

        return _externalProfile;
    }

    @Override
    public BaseProfile as(String alias) {
        return new BaseProfile(DSL.name(alias), this);
    }

    @Override
    public BaseProfile as(Name alias) {
        return new BaseProfile(alias, this);
    }

    @Override
    public BaseProfile as(Table<?> alias) {
        return new BaseProfile(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BaseProfile rename(String name) {
        return new BaseProfile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BaseProfile rename(Name name) {
        return new BaseProfile(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BaseProfile rename(Table<?> name) {
        return new BaseProfile(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BaseProfile where(Condition condition) {
        return new BaseProfile(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BaseProfile where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BaseProfile where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BaseProfile where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BaseProfile where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BaseProfile where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BaseProfile where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BaseProfile where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BaseProfile whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BaseProfile whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
