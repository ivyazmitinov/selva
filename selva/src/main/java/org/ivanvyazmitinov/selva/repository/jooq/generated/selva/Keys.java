/*
 * This file is generated by jOOQ.
 */
package org.ivanvyazmitinov.selva.repository.jooq.generated.selva;


import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.BaseProfile;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.ExternalIntegration;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.ExternalProfile;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.File;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.User;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.records.BaseProfileRecord;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.records.ExternalIntegrationRecord;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.records.ExternalProfileRecord;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.records.FileRecord;
import org.ivanvyazmitinov.selva.repository.jooq.generated.selva.tables.records.UserRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * selva.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BaseProfileRecord> BASE_PROFILE_PKEY = Internal.createUniqueKey(BaseProfile.BASE_PROFILE, DSL.name("base_profile_pkey"), new TableField[] { BaseProfile.BASE_PROFILE.ID }, true);
    public static final UniqueKey<BaseProfileRecord> BASE_PROFILE_USER_ID_KEY = Internal.createUniqueKey(BaseProfile.BASE_PROFILE, DSL.name("base_profile_user_id_key"), new TableField[] { BaseProfile.BASE_PROFILE.USER_ID }, true);
    public static final UniqueKey<ExternalIntegrationRecord> EXTERNAL_INTEGRATION_NAME_KEY = Internal.createUniqueKey(ExternalIntegration.EXTERNAL_INTEGRATION, DSL.name("external_integration_name_key"), new TableField[] { ExternalIntegration.EXTERNAL_INTEGRATION.NAME }, true);
    public static final UniqueKey<ExternalIntegrationRecord> EXTERNAL_INTEGRATION_PKEY = Internal.createUniqueKey(ExternalIntegration.EXTERNAL_INTEGRATION, DSL.name("external_integration_pkey"), new TableField[] { ExternalIntegration.EXTERNAL_INTEGRATION.ID }, true);
    public static final UniqueKey<ExternalIntegrationRecord> EXTERNAL_INTEGRATION_TOKEN_KEY = Internal.createUniqueKey(ExternalIntegration.EXTERNAL_INTEGRATION, DSL.name("external_integration_token_key"), new TableField[] { ExternalIntegration.EXTERNAL_INTEGRATION.TOKEN }, true);
    public static final UniqueKey<ExternalProfileRecord> EXTERNAL_PROFILE_PKEY = Internal.createUniqueKey(ExternalProfile.EXTERNAL_PROFILE, DSL.name("external_profile_pkey"), new TableField[] { ExternalProfile.EXTERNAL_PROFILE.ID }, true);
    public static final UniqueKey<FileRecord> FILE_PKEY = Internal.createUniqueKey(File.FILE, DSL.name("file_pkey"), new TableField[] { File.FILE.ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRecord> USER_USERNAME_KEY = Internal.createUniqueKey(User.USER, DSL.name("user_username_key"), new TableField[] { User.USER.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BaseProfileRecord, UserRecord> BASE_PROFILE__BASE_PROFILE_USER_ID_FKEY = Internal.createForeignKey(BaseProfile.BASE_PROFILE, DSL.name("base_profile_user_id_fkey"), new TableField[] { BaseProfile.BASE_PROFILE.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ExternalProfileRecord, BaseProfileRecord> EXTERNAL_PROFILE__EXTERNAL_PROFILE_BASE_PROFILE_ID_FKEY = Internal.createForeignKey(ExternalProfile.EXTERNAL_PROFILE, DSL.name("external_profile_base_profile_id_fkey"), new TableField[] { ExternalProfile.EXTERNAL_PROFILE.BASE_PROFILE_ID }, Keys.BASE_PROFILE_PKEY, new TableField[] { BaseProfile.BASE_PROFILE.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ExternalProfileRecord, ExternalIntegrationRecord> EXTERNAL_PROFILE__EXTERNAL_PROFILE_EXTERNAL_INTEGRATION_ID_FKEY = Internal.createForeignKey(ExternalProfile.EXTERNAL_PROFILE, DSL.name("external_profile_external_integration_id_fkey"), new TableField[] { ExternalProfile.EXTERNAL_PROFILE.EXTERNAL_INTEGRATION_ID }, Keys.EXTERNAL_INTEGRATION_PKEY, new TableField[] { ExternalIntegration.EXTERNAL_INTEGRATION.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
}
